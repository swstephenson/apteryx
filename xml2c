#!/usr/bin/lua

-- XML Parser based on code by Alexander Makeev
XmlParser = {};
function XmlParser:FromXmlString(value)
    value = string.gsub(value, "&#x([%x]+)%;",
        function(h) 
            return string.char(tonumber(h,16)) 
        end);
    value = string.gsub(value, "&#([0-9]+)%;",
        function(h) 
            return string.char(tonumber(h,10)) 
        end);
    value = string.gsub (value, "&quot;", "\"");
    value = string.gsub (value, "&apos;", "'");
    value = string.gsub (value, "&gt;", ">");
    value = string.gsub (value, "&lt;", "<");
    value = string.gsub (value, "&amp;", "&");
    return value;
end
function XmlParser:ParseArgs(s)
  local arg = {}
  string.gsub(s, "(%w+)=([\"'])(.-)%2", function (w, _, a)
        arg[w] = self:FromXmlString(a);
    end)
  return arg
end
function XmlParser:ParseXmlText(xmlText)
  local stack = {}
  local top = {Name=nil,Value=nil,Attributes={},ChildNodes={}}
  table.insert(stack, top)
  local ni,c,label,xarg, empty
  local i, j = 1, 1
  while true do
    ni,j,c,label,xarg, empty = string.find(xmlText, "<(%/?)([%w:]+)(.-)(%/?)>", i)
    if not ni then break end
    if empty == "/" then  -- empty element tag
      table.insert(top.ChildNodes, {Name=label,Value=nil,Attributes=self:ParseArgs(xarg),ChildNodes=nil})
    elseif c == "" then   -- start tag
      top = {Name=label, Value=nil, Attributes=self:ParseArgs(xarg), ChildNodes={}}
      table.insert(stack, top)   -- new level
    else  -- end tag
      local toclose = table.remove(stack)  -- remove top
      top = stack[#stack]
      table.insert(top.ChildNodes, toclose)
    end
    i = j+1
  end
  return stack[1].ChildNodes[1];
end
function XmlParser:ParseXmlFile(xmlFileName)
    local hFile,err = io.open(xmlFileName,"r");
    if (not err) then
        local xmlText=hFile:read("*a"); -- read file content
        io.close(hFile);
        return self:ParseXmlText(xmlText),nil;
    else
        return nil,err;
    end
end

function generate_help(tbl, path, depth)
    if not depth or depth == 0 then
        depth = 0
    end
    if not path then path = "" end
    if tbl["Name"] == "NODE" and
       tbl["Attributes"] and tbl["Attributes"]["name"] then
        name = tbl["Attributes"]["name"]
        path = path .. "/" .. name
        path = path:gsub("*", "-")
        if tbl["Attributes"]["help"] then
            help = "- " .. tbl["Attributes"]["help"]
            print(string.format("  %-40s %s", path, help))
        else
            print(string.format("  %s", path))
        end
    end
    if tbl["Name"] == "VALUE" and
       tbl["Attributes"] and tbl["Attributes"]["name"] then
        if tbl["Attributes"]["help"] and tbl["Attributes"]["value"] then
            help = "- " .. tbl["Attributes"]["value"] .. " = " .. tbl["Attributes"]["help"]
            print(string.format("  %-40s %s", " ", help))
        end
    end
    if tbl["ChildNodes"] ~= nil then
        for i,field in pairs(tbl["ChildNodes"]) do
            generate_help(field, path, depth+1);
        end
    end
end

function generate_header(xml,filename)
    path,name,type = filename:match("(.-)([^\\/]-%.?([^%.\\/]*))$")
    module = name:gsub(".xml", "")
    print(string.format([[
/**
 * @file %s.h
 * Apteryx API for %s
]], module,module:sub(1,1):upper()..module:sub(2)))
    generate_help(xml)
    print(string.format([[
 */
#ifndef __%s_APTERYX_SCHEMA_H__
#define __%s_APTERYX_SCHEMA_H__
]], module:upper(),module:upper()))
end

function generate_defines(tbl, path, depth)
    if not depth then depth = 0 end
    if not path then path = "" end
    if tbl["Name"] ~= "MODULE" and tbl["Attributes"] and tbl["Attributes"]["name"] then
        name = tbl["Attributes"]["name"]
        path = path .. "/" .. name
        def = string.sub(string.upper(path), 2)
        def = string.gsub(def, "/", "_")
        def = string.gsub(def, "-", "_")
        def = string.gsub(def, "*_", "")
        if name ~= "*" then
            _,wildcards = string.gsub(path, "*", "*")
            if tbl["Name"] == "VALUE" then
                start = def
                if tonumber(tbl["Attributes"]["value"]) ~= nil then
                    finish = string.rep("    ",1+wildcards)..tbl["Attributes"]["value"]
                else
                    finish = string.rep("    ",1+wildcards).."\""..tbl["Attributes"]["value"].."\""
                end
            elseif wildcards > 0 then
                start = def
                finish = string.rep("    ",wildcards).."\""..path:match("/[^\\*]*$"):sub(2).."\""
            elseif tbl["ChildNodes"] ~= nil then
                start = def .. "_PATH"
                finish = "\"" .. path .. "\""
            else
                start = def
                finish = "\"" .. path .. "\""
            end
            print(string.format("#define %-50s %s", start, finish))
        end
        if tbl["Attributes"]["help"] then
            start = def .. "_HELP"
            finish = "\"" .. tbl["Attributes"]["help"] .. "\""
        end
        if tbl["Attributes"]["default"] then
            start = def .. "_DEFAULT"
            if tonumber(tbl["Attributes"]["default"]) ~= nil then
                finish = tbl["Attributes"]["default"]
            else
                finish = "\"" .. tbl["Attributes"]["default"] .. "\""
            end
            if string.find(path, "*") then
                print(string.format("#define %-50s         %s", start, finish))
            else
                print(string.format("#define %-50s     %s", start, finish))
            end
        end
    end
    if tbl["ChildNodes"] ~= nil then
        for i,field in pairs(tbl["ChildNodes"]) do
            generate_defines(field, path, depth+1);
        end
    end
end

function generate_footer(filename)
    path,name,type = filename:match("(.-)([^\\/]-%.?([^%.\\/]*))$")
    module = name:gsub(".xml", "")
    print(string.format([[

#endif /*__%s_APTERYX_SCHEMA_H__*/
]], module:upper()))
end

if arg[1] == nil then
    print("xml2c <xml schema file>")
    return -1
end
filename = arg[1]
local xml = XmlParser:ParseXmlFile(filename)
generate_header(xml,filename)
generate_defines(xml)
generate_footer(filename)
